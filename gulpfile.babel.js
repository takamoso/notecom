import {promises as fs} from 'fs'
import path from 'path'
import crypto from 'crypto'
import rimraf from 'rimraf'
import through2 from 'through2'
import cheerio from 'cheerio'
import gulp from 'gulp'
import touch from 'gulp-touch-cmd'
import plumber from 'gulp-plumber'
import ifelse from 'gulp-if'
import htmlmin from 'gulp-htmlmin'
import sass from 'gulp-sass'
import magic from 'node-sass-magic-importer'
import postcss from 'gulp-postcss'
import webpack from 'webpack'
import webpackStream from 'webpack-stream'
import webpackConfig from './webpack.config.babel'
import named from 'vinyl-named-with-path'

const dev = process.env.NODE_ENV !== 'production'

export const html = async () => {
  return gulp.src('./src/**/*.html')
    .pipe(through2.obj(async (file, _, callback) => {
      if (file.isNull()) {
        callback(null, file)
      }

      const $ = cheerio.load(file.contents.toString())
      const nodes = $('link[rel="stylesheet"]:not([href^="http"]), script[src]:not([src^="http"])')

      for (const node of nodes.toArray()) {
        const attr = node.name === 'link' ? 'href' : 'src'
        const dir = node.attribs[attr].replace(/^\//, '').split('?')[0]
        const stat = await fs.stat(path.resolve(path.dirname(file.path).replace(/\/src\//, '/dist/'), dir)).catch(() => null)

        if (!stat) {
          continue
        }

        const hash = crypto.createHash('md5').update(stat.mtime.toLocaleString()).digest('hex').substr(0, 10)

        node.attribs[attr] = `${dir}?${hash}`
      }

      file.contents = Buffer.from($.root().html())

      callback(null, file)
    }))
    .pipe(ifelse(!dev, htmlmin({
      minifyCSS: true,
      minifyJS: true,
      collapseWhitespace: true,
      includeAutoGeneratedTags: false,
      removeAttributeQuotes: true,
    })))
    .pipe(gulp.dest('./dist'))
}

export const css = async () => {
  return gulp.src('./src/**/!(_)*.scss')
    .pipe(plumber())
    .pipe(sass({
      importer: [
        magic(),
      ],
    }))
    .pipe(ifelse(!dev, postcss()))
    .pipe(gulp.dest('./dist'))
    .pipe(touch())
}

export const js = async () => {
  return gulp.src(`./src/**/*.js`)
    .pipe(plumber())
    .pipe(named())
    .pipe(webpackStream(webpackConfig, webpack))
    .pipe(gulp.dest('./dist'))
}

export const clean = done => rimraf(path.resolve(__dirname, './dist'), {}, done)

export const watch = () => {
  gulp.watch('./src/**/*.html', html)
  gulp.watch('./src/**/*.scss', gulp.series(css, html))
  gulp.watch('./src/**/*.js', gulp.series(js, html))
}

export const build = gulp.series(
  clean,
  gulp.parallel(
    css,
    js,
  ),
  html,
)